#!/bin/bash

if [[ "$UID" != "0" ]];then
  log_message "Re-run this script as root"
  exit 1
fi

if [[ -n $1 ]];then 
  echo "Reading from configuration file $1"
  source $1
fi
force_read(){
  if [[ -z ${!2} ]];then
    local temp
    while [[ -z $temp ]];do
      read -p "$1:  " temp
    done
    eval $2=$temp
  fi
}
log_message(){
  if [[ $? -eq 0 ]];then
    printf "\e[0;32m \u2713 Success: $1 \e[0m \n"
  else
    printf "\e[0;31m \u2713 Failed: $1 \e[0m \n"
    exit 1
  fi
}

find_and_replace(){      
  ESCAPED_REPLACE=$(printf '%s\n' "$2" | sed -e 's/[\/&]/\\&/g')
  sed -i"" '/^'"${1}"'?*=/{h;s/=.*/= '"${ESCAPED_REPLACE}"'/};${x;/^$/{s//'"${1}"' =?*'"${ESCAPED_REPLACE}"'/;H};x}' $3

}
uncomment_line(){
  ESCAPED_REPLACE=$(printf '%s\n' "$1" | sed -e 's/[\/&]/\\&/g')
  sed -i"" -e '/'"$ESCAPED_REPLACE"'/s/^#//g' $2
}

ufw allow "OpenSSH"

apt update -qq
apt upgrade -y -qq 
# apt install -y zsh -qq
# sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"


apt install python3-certbot-dns-digitalocean certbot -y -qq
force_read "digitalocean access token \nhttps://cloud.digitalocean.com/account/api/tokens  " digitalocean_token
echo "dns_digitalocean_token = $digitalocean_token" > ~/.certbot-creds.ini
chmod 600 ~/.certbot-creds.ini
force_read "FQDN doamin.com " domain
force_read "webmaster email " webmaster

certbot certonly --agree-tos -m "$webmaster" --dns-digitalocean --dns-digitalocean-credentials ~/.certbot-creds.ini -d "*.$domain"
ssl_cert=/etc/letsencrypt/live/"$domain"/fullchain.pem
ssl_key=/etc/letsencrypt/live/"$domain"/privkey.pem

if [[ ! -f "${ssl_cert}" ]];then
  log_message "certbot didn not perform correctly" && exit 1
fi
# certbot renew --agree-tos -m $webmaster --dns-digitalocean --dns-digitalocean-credentials ~/.certbot-creds.ini --dns-digitalocean-propagation-seconds 40
if [[ $? -eq 0 ]];then
  sed -i".backup" '/certbot|MAILTO/d' /var/spool/cron/crontabs/root 
  echo "MAILTO=root,${webmaster}" >> /var/spool/cron/crontabs/root 
  echo '1 1 1 * * /usr/bin/certbot renew --dns-digitalocean --dns-digitalocean-credentials ~/.certbot-creds.ini' >> /var/spool/cron/crontabs/root 
  log_message "=> SSL certificate is ready as auto renewal hook cronjob with alerts to webmaster email"
fi
#------------------------------------------------------------------------------------------------------------------------------
# Adding unix mail user 
read -p 'enter root user name: ' mail_root_user
read -p 'enter password: ' mail_root_user_pass
if [[ "$?" -eq "0"&& -n $mail_root_user&& -n  $mail_root_user_pass ]];then
  encrypted_pass=$(perl -e 'print crypt('""$mail_root_user_pass""', "salt"),"\n"')
  useradd -m -p $encrypted_pass $mail_root_user 
  # mkdir -p /home/$mail_root_user/Maildir
  echo "root: ${mail_root_user}" >> /etc/aliases
fi

# install postfix
apt update -qq && apt upgrade -y -qq && apt install jq -y -qq
log_message "Installing Postfix"
apt install postfix mailutils -y -qq
ufw allow "Postfix Submission"
ufw allow "Postfix"

log_message "verifying domain dns..."
# DNS CHECk
current_dns_settings=$(curl -X GET \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $digitalocean_token" \
  "https://api.digitalocean.com/v2/domains/$domain/records")



dmarc_id=$(echo $current_dns_settings | jq '.domain_records[] |select(.type|test("TXT"))|select(.name|test("_dmarc")) | .id')
if [[ -z "$dmarc_id" ]];then
  log_message "DMARC record dont exist, creating..."
  curl -X POST \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $digitalocean_token" \
  -d '{"type":"TXT","name":"_dmarc","data":"\"v=DMARC1;p=quarantine;rua=mailto:abuse@'"${domain}"'\"","priority":null,"port":null,"ttl":3600,"weight":null,"flags":null,"tag":"api_print"}' \
  "https://api.digitalocean.com/v2/domains/$domain/records"
  if [[ $? -eq 0 ]];then log_message "DMARC dns record created";fi
fi

dkim_id=$(echo $current_dns_settings | jq '.domain_records[] |select(.type|test("TXT"))|select(.name|test("default._domainkey")) | .id')
if  [[ -z "$dkim_id" ]];then
  log_message "DKIM record dont exist, creating..."
  curl -X POST \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $digitalocean_token" \
  -d '{"type":"TXT","name":"default._domainkey","data":"\"will populate from dkim file\"","priority":null,"port":null,"ttl":3600,"weight":null,"flags":null,"tag":"api_print"}' \
  "https://api.digitalocean.com/v2/domains/$domain/records"
  if [[ $? -eq 0 ]];then log_message "DKIM dns record created";fi
fi

spf_id=$(echo $current_dns_settings | jq '.domain_records[] |values  |select(.data|test("spf1"))|.id')
if [[ -z "$spf_id" ]];then
  log_message "SPF record dont exist, creating..."
  curl -X POST \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $digitalocean_token" \
  -d '{"type":"TXT","name":"@","data":"\"v=spf1 a ~all\"","priority":null,"port":null,"ttl":3600,"weight":null,"flags":null,"tag":"api_print"}' \
  "https://api.digitalocean.com/v2/domains/$domain/records"
  if [[ $? -eq 0 ]];then log_message "SPF dns record created";fi
fi

log_message "DNS looks fine, proceeding to posfix conf..."
# Postfix conf
echo "mail.$domain">>/etc/hostname
log_message "now edit settings in postfix master.cf..."
postconf -e 'smtpd_tls_cert_file = dovecot'
postconf -e "smtpd_tls_cert_file = $ssl_cert"
postconf -e "smtpd_tls_key_file = $ssl_key"
postconf -e 'smtp_tls_note_starttls_offer = yes'
postconf -e "myhostname = mail.$domain"
postconf -e "mydomain = $domain"
postconf -e 'myorigin = $mydomain'
postconf -e 'mydestination = $myhostname, $mydomain, localhost.$mydomain, localhost'
postconf -e 'smtpd_tls_security_level = encrypt'
postconf -e 'smtp_tls_security_level = encrypt'
postconf -e 'smtpd_tls_mandatory_protocols = !SSLv2, !SSLv3, !TLSv1, !TLSv1.1'
postconf -e 'smtpd_tls_protocols = !SSLv2, !SSLv3, !TLSv1, !TLSv1.1'
postconf -e 'smtp_tls_mandatory_protocols = !SSLv2, !SSLv3, !TLSv1, !TLSv1.1'
postconf -e 'smtp_tls_protocols = !SSLv2, !SSLv3, !TLSv1, !TLSv1.1'
postconf -e 'home_mailbox = Maildir/'
postconf -e 'smtpd_tls_loglevel = 1'
postconf -e 'smtpd_tls_received_header = yes'
postconf -e 'smtpd_tls_loglevel = 1'
postconf -e 'smtpd_tls_session_cache_timeout = 3600s'
postconf -e 'tls_random_source = dev:/dev/urandom'
postconf -e 'broken_sasl_auth_clients = yes'
postconf -e 'smtpd_banner = $myhostname ESMTP $mail_name'
# prepare for dovecot
postconf -e 'smtpd_sasl_type = dovecot'
postconf -e 'smtpd_sasl_path = private/auth'
postconf -e 'smtpd_sasl_auth_enable = yes'
postconf -e 'smtpd_sasl_security_options = noanonymous'
postconf -e 'smtpd_sasl_local_domain = $myhostname'
postconf -e 'smtpd_recipient_restrictions = permit_mynetworks,permit_auth_destination,permit_sasl_authenticated,reject'
# prepare for dkim
postconf -e 'smtpd_milters = inet:127.0.0.1:8891'
postconf -e 'non_smtpd_milters = inet:127.0.0.1:8891'
postconf -e 'milter_default_action = accept'
postconf -e 'alias_maps = hash:/etc/aliases'
# postconf -e 'alias_database = hash:/etc/aliases'

# virtual alias
# postconf -e "virtual_alias_maps = hash:/etc/postfix/virtual"

# cat>>/etc/postfix/virtual<<EOF
# postmaster root@$domain
# abuse postmaster@$domain
# admin postmaster@$domain
# EOF
# postmap /etc/postfix/virtual

# EDIT master.cf
uncomment_line "-o syslog_name=postfix/submission" /etc/postfix/master.cf
uncomment_line "-o smtpd_tls_security_level=encrypt" /etc/postfix/master.cf
uncomment_line "-o smtpd_sasl_auth_enable=yes" /etc/postfix/master.cf
uncomment_line "-o syslog_name=postfix/smtps" /etc/postfix/master.cf
uncomment_line "-o smtpd_relay_restrictions=permit_sasl_authenticated,reject" /etc/postfix/master.cf
sed -i"" -e 's/smtp      inet  n       -       y       -       -       smtpd/smtp      inet  n       -       -       -       -       smtpd/g' /etc/postfix/master.cf
sed -i"" -e 's/#submission inet n       -       y       -       -       smtpd/submission inet n       -       -       -       -       smtpd/g' /etc/postfix/master.cf
sed -i"" -e 's/#smtps     inet  n       -       y       -       -       smtpd/smtps     inet  n       -       -       -       -       smtpd/g' /etc/postfix/master.cf





#------------------------------------------------------------------------------------------------------------------------------
# Dovecot IMAP SASL conf
log_message "moving on with dovecot configs..."

apt install dovecot-core dovecot-imapd dovecot-pop3d dovecot-lmtpd -y -qq
ufw allow "Dovecot Secure IMAP"

mv /etc/dovecot/dovecot.conf /etc/dovecot/dovecot.conf.orig


cat >> /etc/dovecot/dovecot.conf<<EOF
disable_plaintext_auth = no
mail_privileged_group = mail
mail_location = maildir:~/Maildir

userdb {
      driver = passwd
}

passdb {
     args = %s
     driver = pam
}

protocols = imap pop3 lmtp

namespace inbox {
  inbox = yes

  mailbox Trash {
    auto = subscribe
    special_use = \Trash
  }
  mailbox Sent {
    auto = subscribe
    special_use = \Sent
  }
  mailbox Drafts {
    auto = subscribe
    special_use = \Drafts
  }
  mailbox Spam {
    auto = subscribe
    special_use = \Junk
  }
  mailbox Archive {
    auto = subscribe
    special_use = \Archive
  }
}
#create and autosubscribe to some default folders

service auth {
      unix_listener /var/spool/postfix/private/auth {
      mode = 0660
      user = postfix
      group = postfix
    }
}

ssl = required
ssl_cert = <$ssl_cert
ssl_key = <$ssl_key
EOF

#------------------------------------------------------------------------------------------------------------------------------
# Install DKIM
log_message "moving on with DKIM configs..."
apt-get install opendkim opendkim-tools -y -qq

mkdir -p /etc/opendkim
mkdir -p /etc/opendkim/keys
mkdir -p /etc/opendkim/keys/$domain
opendkim-genkey -d $domain -s default --directory=/etc/opendkim/keys/$domain
chown -R opendkim:opendkim /etc/opendkim/keys/$domain
echo "default._domainkey.$domain $domain:default:/etc/opendkim/keys/$domain/default.private" >> /etc/opendkim/KeyTable
echo "*@$domain default._domainkey.$domain" >> /etc/opendkim/SigningTable
ready_dkim=$(cat /etc/opendkim/keys/$domain/default.txt|cut -d "(" -f2 |cut -d ")" -f1|cut -d '"' -f2 | tr -d '\n')

dkim_id=$(echo $current_dns_settings | jq '.domain_records[] |select(.type|test("TXT"))|select(.name|test("default._domainkey")) | .id')
if  [[ -z $dkim_id ]];then
  log_message "DKIM record dont exist, creating..."
  curl -X POST \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $digitalocean_token" \
  -d '{"type":"TXT","name":"default._domainkey","data":'"\"$ready_dkim\""',"priority":null,"port":null,"ttl":3600,"weight":null,"flags":null,"tag":"api_print"}' \
  "https://api.digitalocean.com/v2/domains/$domain/records"
  else
    re='^[0-9]+$'
    if ! [[ $dkim_id =~ $re ]];then
      log_message "updating DKIM record..."
      curl -X PUT \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $digitalocean_token" \
      -d '{"data":'""$ready_dkim""'}' \
      "https://api.digitalocean.com/v2/domains/example.com/records/$dkim_id"
    fi
  if [[ $? -eq 0 ]];then log_message "DKIM dns record created";fi
fi




cp /etc/opendkim.conf /etc/opendkim.conf.orig
cat > /etc/opendkim.conf<<EOF
Syslog                  yes
UMask                   007

Canonicalization        relaxed/simple
Mode                    sv
SubDomains              no
AutoRestart             yes
Background              yes
DNSTimeout              5
SignatureAlgorithm      rsa-sha256

SigningTable            refile:/etc/opendkim/SigningTable
KeyTable                /etc/opendkim/KeyTable

ExternalIgnoreList      /etc/opendkim/TrustedHosts
InternalHosts           /etc/opendkim/TrustedHosts

Socket                  inet:8891@localhost

PidFile                 /var/run/opendkim/opendkim.pid
OversignHeaders         From
TrustAnchorFile         /usr/share/dns/root.key
UserID                  opendkim
EOF


machine_ip=$(hostname -I | awk '{print $1}')
test -f /etc/opendkim/TrustedHosts && cp /etc/opendkim/TrustedHosts /etc/opendkim/TrustedHosts.orignal 
cat > /etc/opendkim/TrustedHosts<<EOF
127.0.0.1
::1
localhost
$(hostname).$domain
mail.$machine_ip
mail.$domain
$domain
EOF


# hooking dkim to postfix 
# mkdir -p /var/spool/postfix/opendkim
# # chown postfix:postfix /var/spool/postfix/opendkim
# chown opendkim:postfix /var/spool/postfix/opendkim

# find_and_replace "SOCKET" '"local:/var/spool/postfix/opendkim/opendkim.sock"' /etc/default/opendkim

# postconf -e "milter_protocol = 6"
# postconf -e "smtpd_milters = local:opendkim/opendkim.sock"
# postconf -e "non_smtpd_milters = local:opendkim/opendkim.sock"



#------------------------------------------------------------------------------------------------------------------------------

# log_message "moving on with DKIM,SPF configs...spamassassin spamc"
log_message "moving on with SPF configs..."
apt install postfix-policyd-spf-python postfix-pcre -y -qq

grep policyd-spf /etc/postfix/master.cf || cat >> /etc/postfix/master.cf<<EOF
policyd-spf  unix  -       n       n       -       0       spawn
    user=policyd-spf argv=/usr/bin/policyd-spf
EOF

postconf -e 'policyd-spf_time_limit = 3600'
postconf -e 'smtpd_recipient_restrictions = permit_mynetworks,permit_auth_destination,permit_sasl_authenticated,reject_unknown_recipient_domain,reject_unauth_destination,reject_rbl_client sbl.spamhaus.org,check_policy_service unix:private/policyd-spf,'
postconf -e 'smtpd_helo_restrictions = reject_invalid_helo_hostname,reject_non_fqdn_helo_hostname,reject_unknown_helo_hostname'
postconf -e 'smtpd_client_restrictions = reject_rbl_client dnsbl.sorbs.net'
# log_message "try now send mail to: check-auth@verifier.port25.com"

#------------------------------------------------------------------------------------------------------------------------------
#SPAM assasin
apt install spamassassin spamc -y -qq
pre_initiated=$(grep spamassassin /etc/postfix/master.cf)
if [[ $? -eq 1 ]];then
sed -i"" '/#  -o milter_macro_daemon_name=ORIGINATING/a \ \ -o content_filter=spamassassin' /etc/postfix/master.cf
cat >> /etc/postfix/master.cf<<EOF
spamassassin unix  -     n       n       -       -       pipe
        user=debian-spamd argv=/usr/bin/spamc -f -e
        /usr/sbin/sendmail -oi -f \${sender} \${recipient}

EOF
fi
systemctl start postfix dovecot opendkim spamassassin
systemctl restart postfix dovecot opendkim spamassassin
systemctl enable postfix dovecot opendkim spamassassin
ufw --force reload

log_message "=======TESTING SETUP======="

sendmail -f $mail_root_user@$domain -t check-auth@verifier.port25.com << EOF
Subject: test from sendmail 
Hi there !!!
EOF
log_message "test results arrived, take a peak!"
lastmail=$(ls -t /home/$mail_root_user/Maildir/cur | head -1)
[[ -n $lastmail ]] && awk '/Summary of Results/{flag=1} /Explanation/{flag=0} flag' /home/$mail_root_user/Maildir/cur/$lastmail